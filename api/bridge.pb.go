// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/bridge.proto

package bridge_api_call

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_bridge_ddb8943a0496c224, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type OpenMessage struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenMessage) Reset()         { *m = OpenMessage{} }
func (m *OpenMessage) String() string { return proto.CompactTextString(m) }
func (*OpenMessage) ProtoMessage()    {}
func (*OpenMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bridge_ddb8943a0496c224, []int{1}
}
func (m *OpenMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenMessage.Unmarshal(m, b)
}
func (m *OpenMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenMessage.Marshal(b, m, deterministic)
}
func (dst *OpenMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenMessage.Merge(dst, src)
}
func (m *OpenMessage) XXX_Size() int {
	return xxx_messageInfo_OpenMessage.Size(m)
}
func (m *OpenMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OpenMessage proto.InternalMessageInfo

func (m *OpenMessage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ProtoId struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProtoId) Reset()         { *m = ProtoId{} }
func (m *ProtoId) String() string { return proto.CompactTextString(m) }
func (*ProtoId) ProtoMessage()    {}
func (*ProtoId) Descriptor() ([]byte, []int) {
	return fileDescriptor_bridge_ddb8943a0496c224, []int{2}
}
func (m *ProtoId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtoId.Unmarshal(m, b)
}
func (m *ProtoId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtoId.Marshal(b, m, deterministic)
}
func (dst *ProtoId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoId.Merge(dst, src)
}
func (m *ProtoId) XXX_Size() int {
	return xxx_messageInfo_ProtoId.Size(m)
}
func (m *ProtoId) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoId.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoId proto.InternalMessageInfo

func (m *ProtoId) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "bridge_api_call.empty")
	proto.RegisterType((*OpenMessage)(nil), "bridge_api_call.openMessage")
	proto.RegisterType((*ProtoId)(nil), "bridge_api_call.protoId")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnectionBridgeClient is the client API for ConnectionBridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectionBridgeClient interface {
	OpenTCP(ctx context.Context, in *OpenMessage, opts ...grpc.CallOption) (*ProtoId, error)
	OpenUnix(ctx context.Context, in *OpenMessage, opts ...grpc.CallOption) (*ProtoId, error)
	KeepAlive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type connectionBridgeClient struct {
	cc *grpc.ClientConn
}

func NewConnectionBridgeClient(cc *grpc.ClientConn) ConnectionBridgeClient {
	return &connectionBridgeClient{cc}
}

func (c *connectionBridgeClient) OpenTCP(ctx context.Context, in *OpenMessage, opts ...grpc.CallOption) (*ProtoId, error) {
	out := new(ProtoId)
	err := c.cc.Invoke(ctx, "/bridge_api_call.ConnectionBridge/openTCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionBridgeClient) OpenUnix(ctx context.Context, in *OpenMessage, opts ...grpc.CallOption) (*ProtoId, error) {
	out := new(ProtoId)
	err := c.cc.Invoke(ctx, "/bridge_api_call.ConnectionBridge/openUnix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionBridgeClient) KeepAlive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bridge_api_call.ConnectionBridge/keepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionBridgeServer is the server API for ConnectionBridge service.
type ConnectionBridgeServer interface {
	OpenTCP(context.Context, *OpenMessage) (*ProtoId, error)
	OpenUnix(context.Context, *OpenMessage) (*ProtoId, error)
	KeepAlive(context.Context, *Empty) (*Empty, error)
}

func RegisterConnectionBridgeServer(s *grpc.Server, srv ConnectionBridgeServer) {
	s.RegisterService(&_ConnectionBridge_serviceDesc, srv)
}

func _ConnectionBridge_OpenTCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionBridgeServer).OpenTCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge_api_call.ConnectionBridge/OpenTCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionBridgeServer).OpenTCP(ctx, req.(*OpenMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionBridge_OpenUnix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionBridgeServer).OpenUnix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge_api_call.ConnectionBridge/OpenUnix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionBridgeServer).OpenUnix(ctx, req.(*OpenMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionBridge_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionBridgeServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge_api_call.ConnectionBridge/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionBridgeServer).KeepAlive(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectionBridge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bridge_api_call.ConnectionBridge",
	HandlerType: (*ConnectionBridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "openTCP",
			Handler:    _ConnectionBridge_OpenTCP_Handler,
		},
		{
			MethodName: "openUnix",
			Handler:    _ConnectionBridge_OpenUnix_Handler,
		},
		{
			MethodName: "keepAlive",
			Handler:    _ConnectionBridge_KeepAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/bridge.proto",
}

func init() { proto.RegisterFile("api/bridge.proto", fileDescriptor_bridge_ddb8943a0496c224) }

var fileDescriptor_bridge_ddb8943a0496c224 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2c, 0xc8, 0xd4,
	0x4f, 0x2a, 0xca, 0x4c, 0x49, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x87, 0xf0,
	0xe2, 0x13, 0x0b, 0x32, 0xe3, 0x93, 0x13, 0x73, 0x72, 0x94, 0xd8, 0xb9, 0x58, 0x53, 0x73, 0x0b,
	0x4a, 0x2a, 0x95, 0xd4, 0xb9, 0xb8, 0xf3, 0x0b, 0x52, 0xf3, 0x7c, 0x53, 0x8b, 0x8b, 0x13, 0xd3,
	0x53, 0x85, 0x24, 0xb8, 0xd8, 0x13, 0x53, 0x52, 0x8a, 0x52, 0x8b, 0x8b, 0x25, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x49, 0x2e, 0x76, 0xb0, 0x59, 0x9e, 0x29, 0x42, 0x7c, 0x5c,
	0x4c, 0x99, 0x29, 0x60, 0x79, 0xde, 0x20, 0xa6, 0xcc, 0x14, 0xa3, 0x3b, 0x8c, 0x5c, 0x02, 0xce,
	0xf9, 0x79, 0x79, 0xa9, 0xc9, 0x25, 0x99, 0xf9, 0x79, 0x4e, 0x60, 0xab, 0x84, 0x9c, 0xb9, 0xd8,
	0x41, 0x06, 0x87, 0x38, 0x07, 0x08, 0xc9, 0xe8, 0xa1, 0x59, 0xaf, 0x87, 0x64, 0xa5, 0x94, 0x04,
	0x86, 0x2c, 0xd4, 0x1e, 0x25, 0x06, 0x21, 0x17, 0x2e, 0x0e, 0x90, 0xd2, 0xd0, 0xbc, 0xcc, 0x0a,
	0x0a, 0x4c, 0xb1, 0xe5, 0xe2, 0xcc, 0x4e, 0x4d, 0x2d, 0x70, 0xcc, 0xc9, 0x2c, 0x4b, 0x15, 0x12,
	0xc3, 0x50, 0x08, 0x0e, 0x08, 0x29, 0x1c, 0xe2, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x93, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xe0, 0x3b, 0x06, 0x57, 0x01, 0x00, 0x00,
}
